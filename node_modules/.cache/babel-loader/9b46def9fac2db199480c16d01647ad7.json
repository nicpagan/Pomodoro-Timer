{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicxp\\\\OneDrive\\\\THINKFUL BACKUP\\\\29-PROJECT-POMODORO-TIMER\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Display.jsx\";\nimport React from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\nexport default function Display({\n  TimerData,\n  isTimerRunning,\n  setTimerData\n}) {\n  let {\n    focusSecs,\n    counter,\n    focusTime,\n    displayName,\n    breakTime,\n    breakSecs,\n    onFocus\n  } = TimerData;\n  let paused = !isTimerRunning ? \"block\" : \"none\";\n  let currentSession = onFocus ? {\n    mins: focusTime,\n    secs: focusSecs\n  } : {\n    mins: breakTime,\n    secs: breakSecs\n  };\n  useInterval(() => {\n    setTimerData(currentData => {\n      if (currentData.displayName === \"Focusing\" && currentData.counter >= currentData.focusSecs) {\n        currentData.counter = 0;\n        currentData.displayName = \"On Break\";\n        currentData.onFocus = !currentData.onFocus;\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1373.mp3`).play();\n      } else if (currentData.displayName === \"On Break\" && currentData.counter >= currentData.breakSecs) {\n        currentData.counter = 0;\n        currentData.displayName = \"Focusing\";\n        currentData.onFocus = !currentData.onFocus;\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1373.mp3`).play();\n      }\n\n      return { ...currentData,\n        counter: currentData.counter + 1\n      };\n    });\n  }, isTimerRunning ? 1000 : null);\n  let bar = `${counter / currentSession.secs * 100}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: `${TimerData.display}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, displayName, \" for \", minutesToDuration(currentSession.mins), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, secondsToDuration(currentSession.secs - counter), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: paused\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Paused\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": bar // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${bar}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/nicxp/OneDrive/THINKFUL BACKUP/29-PROJECT-POMODORO-TIMER/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.jsx"],"names":["React","secondsToDuration","minutesToDuration","useInterval","Display","TimerData","isTimerRunning","setTimerData","focusSecs","counter","focusTime","displayName","breakTime","breakSecs","onFocus","paused","currentSession","mins","secs","currentData","Audio","play","bar","display","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\r\nimport useInterval from \"../utils/useInterval\";\r\n\r\nexport default function Display({ TimerData, isTimerRunning, setTimerData }) {\r\n  let {\r\n    focusSecs,\r\n    counter,\r\n    focusTime,\r\n    displayName,\r\n    breakTime,\r\n    breakSecs,\r\n    onFocus,\r\n  } = TimerData;\r\n  let paused = !isTimerRunning ? \"block\" : \"none\";\r\n  let currentSession = onFocus\r\n    ? {\r\n        mins: focusTime,\r\n        secs: focusSecs,\r\n      }\r\n    : { mins: breakTime, secs: breakSecs };\r\n\r\n  useInterval(\r\n    () => {\r\n      setTimerData((currentData) => {\r\n        if (\r\n          currentData.displayName === \"Focusing\" &&\r\n          currentData.counter >= currentData.focusSecs\r\n        ) {\r\n          currentData.counter = 0;\r\n          currentData.displayName = \"On Break\";\r\n          currentData.onFocus = !currentData.onFocus;\r\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1373.mp3`).play();\r\n        } else if (\r\n          currentData.displayName === \"On Break\" &&\r\n          currentData.counter >= currentData.breakSecs\r\n        ) {\r\n          currentData.counter = 0;\r\n          currentData.displayName = \"Focusing\";\r\n          currentData.onFocus = !currentData.onFocus;\r\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1373.mp3`).play();\r\n        }\r\n\r\n        return { ...currentData, counter: currentData.counter + 1 };\r\n      });\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n  let bar = `${(counter / currentSession.secs) * 100}`;\r\n  return (\r\n    <div style={{ display: `${TimerData.display}` }}>\r\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {displayName} for {minutesToDuration(currentSession.mins)} minutes\r\n          </h2>\r\n          {/* TODO: Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(currentSession.secs - counter)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div style={{ display: paused }}>\r\n        <h3>Paused</h3>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={bar} // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: `${bar}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}