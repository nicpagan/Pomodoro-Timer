{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicxp\\\\OneDrive\\\\THINKFUL BACKUP\\\\29-PROJECT-POMODORO-TIMER\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\nimport Captions from \"./Captions\";\nimport Timer from \"./Timer\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25); // console.log(focusDuration)\n\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n  //Default starting focusDuration = 25. Function to increase and decrease focusDuration by 5\n  //Default starting breakDuration = 5. Function to increase and decrease breakDuration by 1\n\n  function increaseFocusDuration() {\n    //If focusDuration is less than 60 minutes, increase focusDuration by 5\n    if (focusDuration < 60) {\n      setFocusDuration(focusDuration + 5); //setFocusDuration function, accepts focusDuration state and increments by 5\n    }\n  }\n\n  function decreaseFocusDuration() {\n    //If focusDuration is greater than 5 minutes, decrease focusDuration by 5\n    if (focusDuration > 5) {\n      setFocusDuration(focusDuration - 5); //setFocusDuration function, accepts focusDuration state and decrements by 5\n    }\n  }\n\n  function increaseBreakDuration() {\n    //If breakDuration is less than 15 minutes, increase breakDuration by 1\n    if (breakDuration < 15) {\n      setBreakDuration(breakDuration + 1); //setBreakDuration function, accepts breakDuration state and increments by 1\n    }\n  }\n\n  function decreaseBreakDuration() {\n    //If breakDuration is greater than 1 minute, decrease breakDuration by 1\n    if (breakDuration > 1) {\n      setBreakDuration(breakDuration - 1); //setBreakDuration function, accepts breakDuration state and decrements by 1\n    }\n  }\n\n  function stopButtonHandler() {\n    //When Stop Button is clicked, will reset everything to default.\n    setSession(null); // setSession to null, make setIsTimerRunning false, and setElapsedTime to 0. \n\n    setIsTimerRunning(false);\n    setElapsedTime(0);\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1); //setBreakLeft function, accepts breakLeft state and increments by 1\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick); //given, this is the progress bar\n\n    const timeLeft = session.timeRemaining; //capturing the time remaining in the session in a variable called 'left'\n\n    if (session.label === \"Focusing\") {\n      //if the label of the session is deeply equal to \"Focusing\", then we setAria to \n      setAria(100 * (focusDuration * 60 - timeLeft) / (focusDuration * 60));\n    } else {\n      //Else, then we setAria to \n      setAria(100 * (breakDuration * 60 - timeLeft) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null //If isTimerRunning true, then return 1000 so timer runs at normal speed (1 tick per second), else return null       \n  );\n  useInterval(() => {\n    //useInterval function again. If a session is running and there is time remaining, then increment elapsedTime by 1.\n    if (session && session.timeRemaining) {\n      return setElapsedTime(elapsedTime + 1);\n    }\n  }, 1000);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  console.log(session);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusDuration: focusDuration,\n    increaseFocusDuration: increaseFocusDuration,\n    isTimerRunning: isTimerRunning,\n    decreaseFocusDuration: decreaseFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BreakDuration, {\n    breakDuration: breakDuration,\n    increaseBreakDuration: increaseBreakDuration,\n    isTimerRunning: isTimerRunning,\n    decreaseBreakDuration: decreaseBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopButtonHandler: stopButtonHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Captions, {\n    aria: aria,\n    breakDuration: breakDuration,\n    focusDuration: focusDuration,\n    session: session,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro; // return (\n//   <div className=\"pomodoro\">\n//     <div className=\"row\">\n//       <div className=\"col\">\n// ------ FOCUS COMPARTMENT -------\n//         <div className=\"input-group input-group-lg mb-2\">\n//           <span className=\"input-group-text\" data-testid=\"duration-focus\">\n//             {/* TODO: Update this text to display the current focus session duration */}\n//             Focus Duration: 25:00\n//           </span>\n//           <div className=\"input-group-append\">\n//             {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               data-testid=\"decrease-focus\"\n//             >\n//               <span className=\"oi oi-minus\" />\n//             </button>\n//             {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               data-testid=\"increase-focus\"\n//             >\n//               <span className=\"oi oi-plus\" />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"col\">\n//         <div className=\"float-right\">\n// ----- BREAK COMPARTMENT -------\n//           <div className=\"input-group input-group-lg mb-2\">\n//             <span className=\"input-group-text\" data-testid=\"duration-break\">\n//               {/* TODO: Update this text to display the current break session duration */}\n//               Break Duration: 05:00\n//             </span>\n//             <div className=\"input-group-append\">\n//               {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary\"\n//                 data-testid=\"decrease-break\"\n//               >\n//                 <span className=\"oi oi-minus\" />\n//               </button>\n//               {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary\"\n//                 data-testid=\"increase-break\"\n//               >\n//                 <span className=\"oi oi-plus\" />\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//     <div className=\"row\">\n//       <div className=\"col\">\n// --------------TIMER COMPARTMENT ---------------------------\n//        <div\n//           className=\"btn-group btn-group-lg mb-2\"\n//           role=\"group\"\n//           aria-label=\"Timer controls\"\n//         >\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary\"\n//             data-testid=\"play-pause\"\n//             title=\"Start or pause timer\"\n//             onClick={playPause}\n//           >\n//             <span\n//               className={classNames({\n//                 oi: true,\n//                 \"oi-media-play\": !isTimerRunning,\n//                 \"oi-media-pause\": isTimerRunning,\n//               })}\n//             />\n//           </button>\n//           {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n//           {/* TODO: Disable the stop button when there is no active session */}\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-secondary\"\n//             data-testid=\"stop\"\n//             title=\"Stop the session\"\n//           >\n//             <span className=\"oi oi-media-stop\" />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n// --------- CAPTIONS COMPARTMENT ---------------------\n//     <div>\n//       {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n//       <div className=\"row mb-2\">\n//         <div className=\"col\">\n//           {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n//           <h2 data-testid=\"session-title\">\n//             {session?.label} for 25:00 minutes\n//           </h2>\n//           {/* TODO: Update message below correctly format the time remaining in the current session */}\n//           <p className=\"lead\" data-testid=\"session-sub-title\">\n//             {session?.timeRemaining} remaining\n//           </p>\n//         </div>\n//       </div>\n//       <div className=\"row mb-2\">\n//         <div className=\"col\">\n//           <div className=\"progress\" style={{ height: \"20px\" }}>\n//             <div\n//               className=\"progress-bar\"\n//               role=\"progressbar\"\n//               aria-valuemin=\"0\"\n//               aria-valuemax=\"100\"\n//               aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n//               style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   </div>\n// );","map":{"version":3,"sources":["C:/Users/nicxp/OneDrive/THINKFUL BACKUP/29-PROJECT-POMODORO-TIMER/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","BreakDuration","FocusDuration","Captions","Timer","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","elapsedTime","setElapsedTime","aria","setAria","breakLeft","setBreakLeft","increaseFocusDuration","decreaseFocusDuration","increaseBreakDuration","decreaseBreakDuration","stopButtonHandler","Audio","play","timeLeft","playPause","nextState","prevStateSession","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\nimport Captions from \"./Captions\";\nimport Timer from \"./Timer\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  // console.log(focusDuration)\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0);\n\n\n // ToDo: Allow the user to adjust the focus and break duration.\n //Default starting focusDuration = 25. Function to increase and decrease focusDuration by 5\n //Default starting breakDuration = 5. Function to increase and decrease breakDuration by 1\n \n\nfunction increaseFocusDuration () {                             //If focusDuration is less than 60 minutes, increase focusDuration by 5\n  if(focusDuration < 60) {\n    setFocusDuration(focusDuration + 5);                    //setFocusDuration function, accepts focusDuration state and increments by 5\n  }\n}\nfunction decreaseFocusDuration () {                           //If focusDuration is greater than 5 minutes, decrease focusDuration by 5\n  if(focusDuration > 5) {\n    setFocusDuration(focusDuration - 5);                  //setFocusDuration function, accepts focusDuration state and decrements by 5\n  }\n}\nfunction increaseBreakDuration () {                        //If breakDuration is less than 15 minutes, increase breakDuration by 1\n  if(breakDuration < 15) {\n    setBreakDuration(breakDuration + 1);                  //setBreakDuration function, accepts breakDuration state and increments by 1\n  }\n}\nfunction decreaseBreakDuration () {                      //If breakDuration is greater than 1 minute, decrease breakDuration by 1\n  if(breakDuration > 1) {\n    setBreakDuration(breakDuration - 1);                  //setBreakDuration function, accepts breakDuration state and decrements by 1\n  }\n}\nfunction stopButtonHandler () {                         //When Stop Button is clicked, will reset everything to default.\n  setSession(null);                                     // setSession to null, make setIsTimerRunning false, and setElapsedTime to 0. \n  setIsTimerRunning(false);\n  setElapsedTime(0);\n}\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1)                             //setBreakLeft function, accepts breakLeft state and increments by 1\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);                               //given, this is the progress bar\n      const timeLeft = session.timeRemaining                  //capturing the time remaining in the session in a variable called 'left'\n      if(session.label === \"Focusing\") {                  //if the label of the session is deeply equal to \"Focusing\", then we setAria to \n        setAria(100*(focusDuration * 60 - timeLeft)/(focusDuration*60))\n      }\n      else {                                              //Else, then we setAria to \n        setAria(100*(breakDuration * 60 - timeLeft)/(breakDuration*60))\n      }\n    },\n    isTimerRunning ? 1000 : null                          //If isTimerRunning true, then return 1000 so timer runs at normal speed (1 tick per second), else return null       \n  );\n\n  useInterval(()=> {                                      //useInterval function again. If a session is running and there is time remaining, then increment elapsedTime by 1.\n    if(session && session.timeRemaining) {\n      return setElapsedTime(elapsedTime + 1)\n    }\n   }, 1000)\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  console.log(session)\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          {/* embedding FocusDuration component.  */}\n          <FocusDuration\n          focusDuration={focusDuration}\n          increaseFocusDuration={increaseFocusDuration}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusDuration={decreaseFocusDuration}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            {/* embedding FocusDuration component.  */}\n            <BreakDuration\n            breakDuration={breakDuration}\n            increaseBreakDuration={increaseBreakDuration}\n            isTimerRunning={isTimerRunning}\n            decreaseBreakDuration={decreaseBreakDuration}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {/* embedding Timer compartment.  */}\n          <Timer\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            stopButtonHandler={stopButtonHandler}\n          />\n        </div>\n      </div>\n      {/* embedding FocusDuration compartment.  */}\n        <Captions \n          aria={aria}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          session={session}\n          isTimerRunning={isTimerRunning}\n        />  \n    </div>\n  );\n}\n\nexport default Pomodoro;\n\n\n\n\n\n\n\n// return (\n//   <div className=\"pomodoro\">\n//     <div className=\"row\">\n//       <div className=\"col\">\n\n// ------ FOCUS COMPARTMENT -------\n//         <div className=\"input-group input-group-lg mb-2\">\n//           <span className=\"input-group-text\" data-testid=\"duration-focus\">\n//             {/* TODO: Update this text to display the current focus session duration */}\n//             Focus Duration: 25:00\n//           </span>\n//           <div className=\"input-group-append\">\n//             {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               data-testid=\"decrease-focus\"\n//             >\n//               <span className=\"oi oi-minus\" />\n//             </button>\n//             {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               data-testid=\"increase-focus\"\n//             >\n//               <span className=\"oi oi-plus\" />\n//             </button>\n//           </div>\n//         </div>\n\n\n\n//       </div>\n//       <div className=\"col\">\n//         <div className=\"float-right\">\n\n// ----- BREAK COMPARTMENT -------\n//           <div className=\"input-group input-group-lg mb-2\">\n//             <span className=\"input-group-text\" data-testid=\"duration-break\">\n//               {/* TODO: Update this text to display the current break session duration */}\n//               Break Duration: 05:00\n//             </span>\n//             <div className=\"input-group-append\">\n//               {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary\"\n//                 data-testid=\"decrease-break\"\n//               >\n//                 <span className=\"oi oi-minus\" />\n//               </button>\n//               {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n//               <button\n//                 type=\"button\"\n//                 className=\"btn btn-secondary\"\n//                 data-testid=\"increase-break\"\n//               >\n//                 <span className=\"oi oi-plus\" />\n//               </button>\n//             </div>\n//           </div>\n\n\n//         </div>\n//       </div>\n//     </div>\n//     <div className=\"row\">\n//       <div className=\"col\">\n\n// --------------TIMER COMPARTMENT ---------------------------\n//        <div\n//           className=\"btn-group btn-group-lg mb-2\"\n//           role=\"group\"\n//           aria-label=\"Timer controls\"\n//         >\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary\"\n//             data-testid=\"play-pause\"\n//             title=\"Start or pause timer\"\n//             onClick={playPause}\n//           >\n//             <span\n//               className={classNames({\n//                 oi: true,\n//                 \"oi-media-play\": !isTimerRunning,\n//                 \"oi-media-pause\": isTimerRunning,\n//               })}\n//             />\n//           </button>\n//           {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n//           {/* TODO: Disable the stop button when there is no active session */}\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-secondary\"\n//             data-testid=\"stop\"\n//             title=\"Stop the session\"\n//           >\n//             <span className=\"oi oi-media-stop\" />\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n\n// --------- CAPTIONS COMPARTMENT ---------------------\n//     <div>\n//       {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n//       <div className=\"row mb-2\">\n//         <div className=\"col\">\n//           {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n//           <h2 data-testid=\"session-title\">\n//             {session?.label} for 25:00 minutes\n//           </h2>\n//           {/* TODO: Update message below correctly format the time remaining in the current session */}\n//           <p className=\"lead\" data-testid=\"session-sub-title\">\n//             {session?.timeRemaining} remaining\n//           </p>\n//         </div>\n//       </div>\n//       <div className=\"row mb-2\">\n//         <div className=\"col\">\n//           <div className=\"progress\" style={{ height: \"20px\" }}>\n//             <div\n//               className=\"progress-bar\"\n//               role=\"progressbar\"\n//               aria-valuemin=\"0\"\n//               aria-valuemax=\"100\"\n//               aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n//               style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n\n\n//   </div>\n// );"]},"metadata":{},"sourceType":"module"}